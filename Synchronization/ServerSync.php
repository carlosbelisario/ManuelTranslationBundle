<?php
/*
 * This file is part of the Manuel Aguirre Project.
 *
 * (c) Manuel Aguirre <programador.manuel@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace ManuelAguirre\Bundle\TranslationBundle\Synchronization;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Message\Response;
use ManuelAguirre\Bundle\TranslationBundle\Entity\Translation;
use Symfony\Component\HttpFoundation\Response as SfResponse;

/**
 */
class ServerSync
{
    /**
     * @var Client
     */
    protected $guzzle;

    function __construct($guzzle)
    {
        $this->guzzle = $guzzle;
    }

    public function add(Translation $translation)
    {
        return $this->update($translation->getCode(), $translation->getDomain(), $translation);
    }

    public function update($code, $domain, Translation $translation)
    {
        $postData = array(
            'domain' => $domain,
            'code' => $code,
            'synchronizations' => $translation->getSynchronizations(),
            'new' => $translation->getNew(),
            'active' => $translation->getActive(),
            'autogenerated' => $translation->getAutogenerated(),
            'values' => array(),
        );

        foreach ($translation->getValues() as $locale => $value) {
            $postData['values'][$locale] = $value->getValue();
        }


        try {
            $response = $this->guzzle->post('save', array(
                'body' => $postData,
            ));

            $translation->setSynchronizations((string) $response->getBody());
            $translation->setLocalEditions(0);
        } catch (ClientException $e) {
            if ($e->getResponse()->getStatusCode() == SfResponse::HTTP_BAD_REQUEST
            ) {
                //$translation->setConflicts(true);
            }
        }
    }

    public function find($code, $domain)
    {
        dump($code, $domain);
    }

    public function findAll()
    {
        $response = $this->guzzle->get('get-all');

        return $response->json();
    }

    public function findAllChanged()
    {
        $response = $this->guzzle->get('get-all-changed');

        return $response->json();
    }


    public function markUpdated($code, $domain)
    {
        $response = $this->guzzle->post('mark-updated', array(
            'body' => array(
                'code' => $code,
                'domain' => $domain,
            ),
        ));

        return (string) $response->getBody();
    }
}