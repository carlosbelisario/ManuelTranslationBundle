<?php

namespace ManuelAguirre\Bundle\TranslationBundle\Controller;

use ManuelAguirre\Bundle\TranslationBundle\Entity\Translation;
use ManuelAguirre\Bundle\TranslationBundle\Entity\TranslationValue;
use ManuelAguirre\Bundle\TranslationBundle\Form\Type\TranslationFilterType;
use ManuelAguirre\Bundle\TranslationBundle\Form\Type\TranslationType;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Translation\MessageCatalogue;

class DefaultController extends Controller
{
    /**
     * @Route("/list/{page}", name="manuel_translation_list", defaults={"page" = 1})
     */
    public function indexAction(Request $request, $page = 1)
    {
        $session = $this->get('session');
        $filters = $session->get('manuel_translations.trans_filter', array(
            'search' => null,
            'conflicts' => null,
            'changed' => null,
            'domains' => array('messages'),
        ));

        $formFilter = $this->createForm('translation_filter', $filters, array('method' => 'post'))
            ->handleRequest($request);


        if ($formFilter->isSubmitted()) {
            $filters = $formFilter->getData();
            $session->set('manuel_translations.trans_filter', $filters);
        }

        $query = $this->getDoctrine()
            ->getRepository('ManuelTranslationBundle:Translation')
            ->getAllQueryBuilder($filters['search'], $filters['domains'], null, $filters['conflicts'], $filters['changed']);

        $form = $this->createForm('manuel_translation', $this->getNewTranslationInstance());

        $translations = $this->get('knp_paginator')->paginate($query, $page, 50);

        return $this->render('@ManuelTranslation/Default/index.html.twig', array(
            'translations' => $translations,
            'form' => $form->createView(),
            'locales' => $this->container->getParameter('manuel_translation.locales'),
            'form_filter' => $formFilter->createView(),
            'enable_sync' => $this->container->hasParameter('manuel_translation.client.api_key'),
        ));
    }

    /**
     * @Route("/remove-filters", name="manuel_translation_remove_filters")
     */
    public function clearFiltersAction()
    {
        $this->get('session')->remove('manuel_translations.trans_filter');

        return $this->redirectToRoute('manuel_translation_list');
    }

    /**
     * @Route("/save/{id}",
     * name="manuel_translation_save_translation"
     * )
     *
     * @Method("POST")
     */
    public function saveTranslationAction(Translation $translation, Request $request)
    {
        $form = $this->createForm('manuel_translation', $translation)
            ->handleRequest($request);

        if ($form->isSubmitted() and $form->isValid()) {

            $this->get('manuel_translation.translations_repository')->saveTranslation($translation);

            $filesystem = new Filesystem();
            $filenameTemplate = $this->container->getParameter('manuel_translation.filename_template');

            foreach ($translation->getValues() as $value) {
                $filename = sprintf($filenameTemplate, $value->getLocale());
                $filesystem->dumpFile($filename, $translation->getTimestamp());
            }
        } else {
            return $this->render('@ManuelTranslation/form_errors.html.twig', array(
                'form' => $form->createView(),
            ));
        }

        return new Response('Ok');
    }

    /**
     * @Route("/save-new",
     * name="manuel_translation_save_translation_new"
     * )
     *
     * @Method("POST")
     */
    public function saveNewTranslationAction(Request $request)
    {
        return $this->saveTranslationAction($this->getNewTranslationInstance(), $request);
    }

    /**
     * @return Translation
     */
    protected function getNewTranslationInstance()
    {
        $translation = new Translation();
        $translation->setNew(false);
        $translation->setAutogenerated(false);
        $translation->setActive(true);

        foreach ($this->container->getParameter('manuel_translation.locales') as $locale) {
            $translation->setTranslationValue($locale, new TranslationValue($locale));
        }

        return $translation;
    }

    /**
     * @Route("/test")
     */
    public function testAction()
    {
        $dir = $this->container->getParameter('kernel.root_dir') . '/Resources/translations';
        dump($dir);
        $catalogue = new MessageCatalogue('en');

        $this->get('translation.loader')->loadMessages($dir, $catalogue);

        dump($catalogue);

        $this->get('manuel_translation.translations_doctrine_dumper')->dump($catalogue, array(
            'path' => $dir . '/test/',
        ));
        die;

        return new Response('Ok mmm');
    }
}
