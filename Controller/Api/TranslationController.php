<?php
/*
 * This file is part of the Manuel Aguirre Project.
 *
 * (c) Manuel Aguirre <programador.manuel@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace ManuelAguirre\Bundle\TranslationBundle\Controller\Api;

use ManuelAguirre\Bundle\TranslationBundle\Entity\Translation;
use ManuelAguirre\Bundle\TranslationBundle\Entity\TranslationRepository;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * @Route("/translations")
 */
class TranslationController extends Controller
{
    /**
     * @Route("/get-all")
     * @Method("GET")
     * @return JsonResponse
     */
    public function getAllAction()
    {
        $items = $this->getDoctrine()
            ->getManager('server')
            ->getRepository('ManuelTranslationBundle:Translation')
            ->getAll();

        $result = array();

        foreach ($items as $item) {
            $result[$item['domain']][$item['code']] = $item;
        }

        return new JsonResponse($result);
    }

    /**
     * @Route("/get-all-changed")
     * @Method("GET")
     * @return JsonResponse
     */
    public function getAllChangedAction()
    {
        $items = $this->getDoctrine()
            ->getManager('server')
            ->getRepository('ManuelTranslationBundle:Translation')
            ->getAllChanged();

        $result = array();

        foreach ($items as $item) {
            $result[$item['domain']][$item['code']] = $item;
        }

        return new JsonResponse($result);
    }

    /**
     * @Route("/save")
     * @Method({"POST", "PUT"})
     * @return JsonResponse
     */
    public function postAction(Request $request)
    {
        $post = $request->request->all();

        /* @var $em \Doctrine\ORM\EntityManager */
        $em = $this->getDoctrine()->getManager('server');

        /* @var $repository TranslationRepository */
        $repository = $em->getRepository('ManuelTranslationBundle:Translation');

        $entity = $repository->findOneBy(array(
            'domain' => $post['domain'],
            'code' => $post['code'],
        ));

        if (!$entity) {
            $entity = new Translation($post['code'], $post['domain']);
            $entity->setNew($post['new']);
            $entity->setTimestamp(time());
            $entity->setActive($post['active']);
            $entity->setAutogenerated($post['autogenerated']);
        }

        if ($post['synchronizations'] < $entity->getSynchronizations()) {
            return new Response(sprintf('"%s" in "%s" Out of Date', $post['code'], $post['domain']), Response::HTTP_BAD_REQUEST);
        }

        foreach ($post['values'] as $locale => $value) {
            $entity->setValue($locale, $value);
        }

        $entity->setSynchronizations($post['synchronizations'] + 1);
        $entity->setLocalEditions(0);

        $em->persist($entity);
        $em->flush();

        return new Response($entity->getSynchronizations());
    }

    /**
     * @Route("/mark-updated")
     * @Method({"POST", "PUT"})
     * @return JsonResponse
     */
    public function markUpdatedAction(Request $request)
    {
        $post = $request->request->all();

        /* @var $em \Doctrine\ORM\EntityManager */
        $em = $this->getDoctrine()->getManager('server');

        /* @var $repository TranslationRepository */
        $repository = $em->getRepository('ManuelTranslationBundle:Translation');

        $entity = $repository->findOneBy(array(
            'domain' => $post['domain'],
            'code' => $post['code'],
        ));

        if (!$entity) {
            throw $this->createNotFoundException(sprintf('"%s" in "%s" NOT FOUND', $post['code'], $post['domain']));
        }

        $entity->setLocalEditions(0);

        $em->persist($entity);
        $em->flush();

        return new Response($entity->getSynchronizations());
    }

    /**
     * @Route("/generate-backup")
     * @Method({"POST", "PUT"})
     * @return JsonResponse
     */
    public function generateBackupAction()
    {
        $this->get('manuel_translation.translation_manager')->generateBackup();

        return new Response('Ok');
    }
}