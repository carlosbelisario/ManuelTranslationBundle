<?php

namespace ManuelAguirre\Bundle\TranslationBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * Translation
 *
 * @ORM\Table(name="translation_bundle_translation")
 * @ORM\Entity(repositoryClass="ManuelAguirre\Bundle\TranslationBundle\Entity\TranslationRepository")
 * @ORM\HasLifecycleCallbacks()
 * @UniqueEntity(
 *  fields={"code", "domain"},
 *  message="The code is already in use for this domain"
 * )
 */
class Translation
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="code", type="string", length=255)
     */
    private $code;

    /**
     * @var string
     *
     * @ORM\Column(name="domain", type="string", length=255)
     */
    private $domain = 'messages';

    /**
     * @var string
     *
     * @ORM\Column(name="server_editions", type="integer")
     */
    private $serverEditions = 0;

    /**
     * @var string
     *
     * @ORM\Column(name="local_editions", type="integer")
     */
    private $localEditions = 0;

    /**
     * @var string
     *
     * @ORM\Column(name="version", type="integer")
     */
    private $version = 0;

    /**
     * @var boolean
     *
     * @ORM\Column(name="new", type="boolean")
     */
    private $new;

    /**
     * @var boolean
     *
     * @ORM\Column(name="autogenerated", type="boolean")
     */
    private $autogenerated;

    /**
     * @var boolean
     *
     * @ORM\Column(name="active", type="boolean")
     */
    private $active;

    /**
     * @var boolean
     *
     * @ORM\Column(name="is_changed", type="boolean")
     */
    private $isChanged = true;

    /**
     * @ORM\OneToMany(
     *  targetEntity="ManuelAguirre\Bundle\TranslationBundle\Entity\TranslationValue",
     *  mappedBy="translation",
     *  indexBy="locale",
     *  cascade={"persist", "remove"}
     * )
     */
    private $values;

    /**
     * @ORM\Column(name="conflicts", type="boolean", nullable=true)
     */
    private $conflicts = false;

    /**
     * @ORM\Column(name="files", type="array", nullable=true)
     */
    private $files = array();

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set active
     *
     * @param boolean $active
     *
     * @return Translation
     */
    public function setActive($active)
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Get active
     *
     * @return boolean
     */
    public function getActive()
    {
        return $this->active;
    }

    /**
     * Set code
     *
     * @param string $code
     *
     * @return Translation
     */
    public function setCode($code)
    {
        $this->code = $code;

        return $this;
    }

    /**
     * Get code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * Set new
     *
     * @param boolean $new
     *
     * @return Translation
     */
    public function setNew($new)
    {
        $this->new = $new;

        return $this;
    }

    /**
     * Get new
     *
     * @return boolean
     */
    public function getNew()
    {
        return $this->new;
    }

    /**
     * Set autogenerated
     *
     * @param boolean $autogenerated
     *
     * @return Translation
     */
    public function setAutogenerated($autogenerated)
    {
        $this->autogenerated = $autogenerated;

        return $this;
    }

    /**
     * Get autogenerated
     *
     * @return boolean
     */
    public function getAutogenerated()
    {
        return $this->autogenerated;
    }

    /**
     * Constructor
     */
    public function __construct($code = null, $domain = null)
    {
        $this->values = new \Doctrine\Common\Collections\ArrayCollection();
        $this->setCode($code);
        $this->setDomain($domain);
    }

    /**
     * Add values
     *
     * @param \ManuelAguirre\Bundle\TranslationBundle\Entity\TranslationValue $values
     *
     * @return Translation
     */
    public function addValue(\ManuelAguirre\Bundle\TranslationBundle\Entity\TranslationValue $values)
    {
        $this->values[] = $values;

        $values->setTranslation($this);

        return $this;
    }

    /**
     * Remove values
     *
     * @param \ManuelAguirre\Bundle\TranslationBundle\Entity\TranslationValue $values
     */
    public function removeValue(\ManuelAguirre\Bundle\TranslationBundle\Entity\TranslationValue $values)
    {
        $this->values->removeElement($values);
    }

    /**
     * Get values
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getValues()
    {
        return $this->values;
    }

    public function setTranslationValue($locale, TranslationValue $value)
    {
        $this->values[$locale] = $value;
        $value->setTranslation($this);
    }

    public function setValue($locale, $value)
    {
        if (!isset($this->values[$locale])) {
            $this->values[$locale] = new TranslationValue($locale);
            $this->values[$locale]->setTranslation($this);
        }

        $this->values[$locale]->setValue($value);
    }

    /**
     * Set domain
     *
     * @param string $domain
     *
     * @return Translation
     */
    public function setDomain($domain)
    {
        $this->domain = $domain;

        return $this;
    }

    /**
     * Get domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->domain;
    }

    /**
     * Set conflicts
     *
     * @param boolean $conflicts
     *
     * @return Translation
     */
    public function setConflicts($conflicts)
    {
        $this->conflicts = $conflicts;

        return $this;
    }

    /**
     * Get conflicts
     *
     * @return boolean
     */
    public function getConflicts()
    {
        return $this->conflicts;
    }

    /**
     * Set serverEditions
     *
     * @param integer $serverEditions
     * @return Translation
     */
    public function setServerEditions($serverEditions)
    {
        $this->serverEditions = $serverEditions;

        return $this;
    }

    /**
     * Get serverEditions
     *
     * @return integer 
     */
    public function getServerEditions()
    {
        return $this->serverEditions;
    }

    /**
     * Set version
     *
     * @param integer $version
     * @return Translation
     */
    public function setVersion($version)
    {
        $this->version = $version;

        return $this;
    }

    /**
     * Get version
     *
     * @return integer 
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Set isChanged
     *
     * @param boolean $isChanged
     * @return Translation
     */
    public function setIsChanged($isChanged)
    {
        $this->isChanged = $isChanged;

        return $this;
    }

    /**
     * Get isChanged
     *
     * @return boolean 
     */
    public function getIsChanged()
    {
        return $this->isChanged;
    }

    /**
     * Set localEditions
     *
     * @param integer $localEditions
     * @return Translation
     */
    public function setLocalEditions($localEditions)
    {
        $this->localEditions = $localEditions;

        return $this;
    }

    /**
     * Get localEditions
     *
     * @return integer 
     */
    public function getLocalEditions()
    {
        return $this->localEditions;
    }

    /**
     * Set files
     *
     * @param array $files
     * @return Translation
     */
    public function setFiles($files)
    {
        $this->files = $files;

        return $this;
    }

    /**
     * Get files
     *
     * @return array 
     */
    public function getFiles()
    {
        return $this->files;
    }
}
